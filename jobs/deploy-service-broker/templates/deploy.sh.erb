#!/bin/bash -exu

<%# TODO support variable instance count %>

<%
  def grab_app_domain_name
    app_domains_str = properties.app_domains.to_s
    array_start = ( app_domains_str =~ /^\[/ )
    if (array_start == 0)
      app_domain_entry = app_domains_str.gsub(/^\[/, '').gsub(/\]/,'').gsub(/,.*/, '')
    else
      app_domain_entry = app_domains_str
    end
    app_domain_entry
  end
  app_domain = grab_app_domain_name
-%>

SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

export PATH="/var/vcap/packages/cf_cli/bin:$PATH"

export SCHEME=https
<%# TODO use credhub for password storage/retreival %>
export ADMIN_USER=<%= properties.cf.admin_user %>
export ADMIN_PASSWORD=<%= properties.cf.admin_password %>
export DOMAIN=<%= properties.domain %>
export APP_DOMAIN=<%="#{app_domain}"%>
export API_ENDPOINT=$SCHEME://api.${DOMAIN}
export APP_NAME=<%= properties.app_name %>
export QUOTA=${APP_NAME}-service-quota
export ORG=<%= properties.app_organization %>
export SPACE=<%= properties.app_space %>
export CF_TARGET=$API_ENDPOINT
export CF_USER=$ADMIN_USER
export CF_PASSWORD=$ADMIN_PASSWORD
export CF_SKIP_SSL=<%= properties.ssl.skip_cert_verify %>
export ORG_QUOTA=<%= properties.org_quota %>
export APP_PUSH_TIMEOUT=<%= properties.timeout %>
export APP_PUSH_MEMORY=<%= properties.memory %>
<%# TODO use credhub for password storage/retreival %>
export SECURITY_USERNAME=<%= properties.security_username %>
export SECURITY_PASSWORD=<%= properties.security_password %>
export BROKER_CERTIFICATE="<%= properties.certificate %>"

export CREATE_OPEN_SECURITY_GROUP=<%= properties.create_open_security_group %>

export EXPLODED_APP_FOLDER="exploded-app-contents"

export CF_HOME=`pwd`/home/cf
mkdir -p $CF_HOME

# Following variables would be replaced based on blobs that get added and are considered as app bits
# Modify extension type for App file - modify as needed
APP_PREFIX_NAME=ecs-cf-service-broker
EXTENSION_TYPE=jar

TARGET_APP=${APP_PREFIX_NAME}.${EXTENSION_TYPE}
JOB_NAME=deploy-service-broker
PACKAGE_NAME_SUFFIX=service_broker
PACKAGE_PATH=`echo /var/vcap/packages/*_${PACKAGE_NAME_SUFFIX}`

RUN_DIR=/var/vcap/sys/run/$JOB_NAME
LOG_DIR=/var/vcap/sys/log/$JOB_NAME
PIDFILE=${RUN_DIR}/pid

export DEBUG_LOG=$LOG_DIR/deploy-service-broker.log

mkdir -p $RUN_DIR $LOG_DIR
chown -R vcap:vcap $RUN_DIR $LOG_DIR

function log_debug() {
  echo `date` $1 >> $DEBUG_LOG
}

function authenticate_and_target() {
  cf api $API_ENDPOINT <% if properties.ssl.skip_cert_verify %>--skip-ssl-validation<% end %>
  cf auth $ADMIN_USER $ADMIN_PASSWORD
  cf create-org $ORG
  cf target -o $ORG
  cf create-space $SPACE
  cf target -s $SPACE
}

function create_quota() {
  cf create-quota $QUOTA -m ${ORG_QUOTA}m -r 10 -s 10
  cf update-quota $QUOTA -m ${ORG_QUOTA}m -r 10 -s 10 --disallow-paid-service-plans
  cf set-quota $ORG $QUOTA
}

function create_open_security_group() {
  if [ "${CREATE_OPEN_SECURITY_GROUP}" == "true" ]; then
    echo "Creating open security group"

    cf create-security-group all_open $PACKAGE_PATH/templates/all_open.json
    cf bind-running-security-group all_open
  else
    echo "Not creating open security group"
  fi
}

function restart_app() {
  CF_TRACE=true cf restart ${APP_NAME}
  cf logs ${APP_NAME} --recent
}

function wait_till_running() {
  for i in `seq 1  6`
  do
    CF_TRACE=true cf app ${APP_NAME} | grep running
    if [ "$?" -ne "0" ]; then
      log_debug "App not running yet..."
      sleep 10
    else
      DEPLOYMENT_STATUS=0
      log_debug "App now up and running ..."
      break
    fi
  done
}

function modify_app() {
  mkdir -p ${EXPLODED_APP_FOLDER}

  cd ${EXPLODED_APP_FOLDER}
  unzip -o ${PACKAGE_PATH}/lib/${APP_PREFIX_NAME}*.${EXTENSION_TYPE}
  cp "$SCRIPT_PATH/../ecs_cert.pem" ecs_cert.pem
  cp "$SCRIPT_PATH/../application.yml" application.yml
  zip -r ${PACKAGE_PATH}/lib/${TARGET_APP} *
}

function push_app() {
  local exit_code

  mkdir -p /var/vcap/data/tmp
  export TMPDIR=/var/vcap/data/tmp

  pushd ${PACKAGE_PATH} > /dev/null
    set +e
      cf app $APP_NAME --guid
      exit_code=$?
    set -e

    if [[ $exit_code -ne 0 ]]; then
      set +e
        cf push "${APP_NAME}" -p ${PACKAGE_PATH}/lib/${TARGET_APP}  -d ${APP_DOMAIN}
        exit_code=$?
      set -e

      if [[ $exit_code -ne 0 ]]; then
        cf logs "${APP_NAME}" --recent
        exit "${exit_code}"
      fi

    else
      cf install-plugin /var/vcap/packages/cf_cli/plugins/autopilot -f
      set +e
        cf zero-downtime-push "${APP_NAME}" -f manifest.yml -p ${PACKAGE_PATH}/lib/${TARGET_APP}
        exit_code=$?
      set -e
      if [[ $exit_code -ne 0 ]]; then
        handle_failed_blue_green_deploy
      fi
    fi
  popd > /dev/null
}

function handle_failed_blue_green_deploy() {
    DEPLOYMENT_STATUS=1
    local notifications_state=$(cf curl /v2/apps/$(cf app $APP_NAME --guid)/stats | jq -r '.["0"].state')
    local venerable_state=$(cf curl /v2/apps/$(cf app $APP_NAME-venerable --guid)/stats | jq -r '.["0"].state')

    # if venerable is up, and new app is down
    if [[ $notifications_state = "DOWN" && $venerable_state != "DOWN" ]]; then
      cf delete $APP_NAME -f
      cf rename $APP_NAME-venerable $APP_NAME
    fi

    # if venerable is up, and new app is up
    if [[ $notifications_state != "DOWN" && $venerable_state != "DOWN" ]]; then
      cf delete $APP_NAME-venerable -f
    fi
}

function print_deployment_status() {
  if [[ $DEPLOYMENT_STATUS != 0 ]]; then
    echo "Deployment failed!"
    exit 1
  fi

  echo "Deployment succeeded!"
}

function cleanup_cf_home() {
  if [[ -d "${CF_HOME}" ]]; then
    rm -rf "${CF_HOME}"
  fi
}

cf -v
authenticate_and_target
create_open_security_group
create_quota
modify_app
push_app
wait_till_running
print_deployment_status
cleanup_cf_home
